import time

# This solution takes 9 seconds for the test case, it runs into time limit exceeded.
class Solution(object):

    def helper(self, nums, dest):
        n = len(nums)
        new_dests = []
        for i in range(dest - 1, -1, -1):
            if nums[i] + i >= dest:
                new_dests.append(i)
        return new_dests

    def canJump(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        n = len(nums)
        if n == 1:
            return True
            
        dest = n - 1

        possible_dests = self.helper(nums, dest)
        reachable_from = {}
        reachable_from[n-1] = True
        for x in possible_dests:
            reachable_from[x] = True
        iteration_count = 0
        while possible_dests:
            iteration_count += 1
            if iteration_count < 5:
                print(f'possible_destinations are {possible_dests}')
            if 0 in possible_dests:
                return True
            
            else:
                s = set()
                for dest in possible_dests:
                    for v in self.helper(nums, dest):
                        s.add(v)
                possible_dests = [x for x in list(s) if x not in reachable_from]
        return False
                
s = Solution()
start = time.time_ns()
test1=[1,2,2,2,2,2,1,1,2,1,1,1,2,1,2,2,1,1,1,1,2,1,2,2,1,2,2,1,1,2,1,2,2,1,2,2,1,2,1,2,2,2,1,1,2,2,2,1,2,2,2,1,1,2,1,1,1,1,1,2,2,2,2,1,1,1,2,2,2,2,2,2,2,1,1,2,1,2,2,1,1,1,2,2,1,1,2,1,2,2,2,2,2,2,2,1,1,2,2,2,1,1,1,2,1,1,1,2,1,2,1,2,2,2,2,2,1,1,1,1,2,1,1,2,1,1,1,1,2,1,2,1,1,2,2,2,1,2,2,1,1,1,2,1,2,1,2,1,1,2,1,1,2,2,2,1,2,1,1,1,1,2,1,2,2,1,1,1,1,1,2,1,2,1,1,2,2,1,1,2,2,2,2,1,2,2,2,1,2,1,2,1,1,2,1,2,2,2,1,2,2,2,1,1,1,1,2,2,1,1,2,1,1,2,1,1,2,2,1,1,1,2,1,2,2,2,1,2,1,2,2,1,1,2,2,2,2,1,1,2,2,1,2,2,2,1,2,1,1,1,1,1,2,1,2,2,2,1,2,2,1,1,2,2,1,2,2,2,1,2,2,2,1,2,1,2,2,2,2,1,2,2,1,1,1,2,1,1,1,1,1,1,2,2,1,1,2,1,1,1,1,1,2,2,2,2,2,1,1,1,2,1,2,2,1,1,1,1,2,1,2,1,2,2,1,2,2,2,2,1,1,1,1,2,2,2,2,1,1,2,1,2,2,2,1,1,1,2,1,1,1,2,1,2,1,2,2,2,1,2,1,1,1,1,1,1,2,1,1,2,1,1,1,1,2,1,2,1,2,2,2,1,1,2,1,1,2,1,2,2,2,1,1,1,2,2,2,2,1,2,2,1,1,2,1,2,2,1,2,1,2,1,1,2,1,1,1,1,2,2,2,1,1,1,1,2,2,2,2,1,1,2,2,1,2,1,2,2,1,2,1,2,1,1,1,1,1,2,1,1,1,1,2,1,2,2,2,1,1,1,2,2,1,2,1,1,1,1,1,1,1,1,2,2,1,2,1,2,2,2,2,1,1,1,2,2,2,1,1,2,2,1,2,1,1,2,1,1,1,2,2,2,2,1,1,1,1,2,2,2,2,1,1,1,1,1,1,2,2,2,1,1,1,2,1,2,1,1,1,2,1,2,1,2,2,2,1,2,2,2,2,1,1,2,1,1,1,2,1,1,1,2,1,1,1,2,1,1,2,1,2,2,1,1,2,1,1,2,1,1,2,1,2,2,1,2,1,2,2,1,2,1,1,1,2,2,2,1,1,2,1,2,1,2,2,1,2,2,1,2,1,1,1,2,1,1,2,2,2,2,2,1,1,2,2,1,2,2,2,1,2,1,1,1,1,2,2,1,2,1,1,2,2,2,2,2,2,1,2,2,1,2,1,1,2,1,1,1,1,2,2,2,2,2,2,1,2,2,2,2,1,1,1,2,1,1,1,2,2,2,2,2,2,1,2,2,2,1,2,2,1,1,2,1,2,2,1,2,2,2,2,2,1,2,1,1,1,2,1,2,1,2,1,2,1,1,2,2,2,1,1,1,1,2,2,1,2,2,1,1,2,2,1,2,2,2,1,1,1,1,1,2,2,1,1,1,2,1,2,2,1,1,2,1,2,1,2,1,1,1,1,1,1,1,1,2,1,1,1,2,2,1,2,1,2,1,2,1,2,1,1,2,1,2,2,1,2,2,1,1,2,2,2,2,2,2,1,1,2,2,1,1,1,2,2,2,2,1,1,1,1,2,2,2,1,1,1,1,1,1,2,1,2,2,1,2,2,2,2,2,2,1,1,1,1,1,2,2,1,2,2,2,1,2,2,1,2,1,2,1,1,2,1,2,1,1,1,2,1,2,1,1,1,1,2,1,1,1,2,2,2,2,1,1,2,2,2,1,2,2,2,2,1,2,1,2,1,2,1,2,1,2,1,1,2,2,2,2,2,1,1,2,2,2,2,1,2,2,2,2,2,2,2,1,1,1,2,2,2,1,2,2,1,1,1,1,2,2,1,2,1,2,1,1,1,2,2,2,2,2,2,2,2,1,2,2,1,2,1,1,1,2,1,2,1,1,2,1,2,1,2,2,2,2,2,1,1,2,2,1,2,1,1,1,1,2,1,1,2,1,2,1,2,1,2,1,2,1,1,2,1,1,2,1,2,2,1,1,2,1,2,1,1,1,2,2,2,2,2,1,2,2,1,2,1,1,2,1,1,1,2,1,2,2,2,1,2,1,1,1,1,2,2,1,2,1,2,2,2,1,1,2,1,2,2,1,2,2,1,1,1,2,2,1,1,1,1,1,1,1,1,1,2,2,2,2,2,1,1,1,1,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,1,1,1,1,1,1,2,2,2,2,1,2,2,1,2,2,2,1,1,1,2,2,1,1,1,2,2,1,2,2,2,1,1,1,2,2,2,2,1,1,2,1,1,2,2,2,1,1,1,1,1,2,1,1,2,2,1,2,2,2,1,2,2,1,1,2,1,1,2,1,2,2,2,1,2,2,1,1,1,1,1,1,1,2,2,1,2,2,1,1,1,1,1,1,2,1,2,1,1,2,1,2,2,1,2,2,2,1,2,2,2,2,2,1,1,1,1,2,1,1,2,1,1,2,2,2,2,1,1,2,1,1,1,2,1,2,1,2,2,2,1,1,2,1,1,1,1,2,1,2,2,1,2,2,1,2,1,2,2,2,1,2,1,2,1,2,2,2,2,2,1,1,2,2,2,2,1,2,1,2,1,1,1,1,2,2,2,2,1,2,2,1,2,1,2,2,1,2,1,2,1,2,2,2,2,1,2,2,1,2,2,1,2,1,1,2,1,2,2,2,2,1,2,1,1,1,2,2,1,1,1,2,2,2,2,1,2,2,1,1,1,2,1,1,1,2,1,2,2,1,2,1,1,2,2,1,1,2,2,1,2,1,1,2,2,2,2,2,2,2,1,2,2,1,2,2,1,2,1,2,2,1,2,2,1,1,2,2,2,2,1,1,1,2,2,2,2,2,2,1,2,2,2,1,2,1,2,1,2,1,1,1,2,2,2,2,2,1,1,1,1,2,1,1,2,2,2,1,1,1,1,2,1,1,1,2,1,2,2,1,1,2,1,2,1,2,1,1,2,2,2,1,2,2,1,1,1,2,2,2,1,2,2,2,2,2,2,1,2,2,2,2,1,2,1,2,1,1,1,1,2,2,2,1,1,1,1,2,2,2,1,2,1,2,2,2,1,2,2,1,1,2,1,1,1,1,2,1,1,1,2,1,1,1,2,2,1,1,2,1,1,1,2,1,2,2,1,1,2,2,2,1,2,2,2,1,1,2,2,1,2,1,1,1,2,1,2,2,2,1,2,2,1,2,1,1,2,2,1,1,2,1,1,1,2,2,2,1,2,2,2,1,1,1,2,2,1,1,2,1,1,2,2,2,2,1,2,1,2,2,1,2,1,1,1,2,1,2,2,1,2,2,2,2,1,1,2,2,2,2,2,1,1,2,2,1,2,1,1,1,2,2,2,2,1,2,1,1,2,1,2,1,1,2,1,2,2,1,2,2,1,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,2,2,1,2,2,2,2,1,1,2,2,1,1,2,1,1,2,2,2,1,2,2,2,1,2,2,1,1,2,2,2,1,2,2,2,2,2,1,2,1,1,2,2,1,2,1,2,2,1,1,2,1,1,2,1,1,2,1,2,2,1,1,2,1,2,1,1,1,2,1,2,1,2,2,1,2,2,2,2,2,2,2,2,1,1,1,1,2,2,1,1,2,2,2,1,2,1,2,2,1,1,2,2,2,2,1,1,2,2,1,1,1,1,2,2,1,2,1,2,1,2,1,2,1,1,2,2,2,2,2,1,1,2,1,2,1,2,1,1,1,1,1,2,1,2,2,2,2,1,2,2,1,1,2,1,1,1,2,2,1,2,1,1,2,2,1,2,2,1,1,1,1,2,2,1,1,2,2,1,1,2,2,1,2,1,1,2,2,1,2,2,1,2,2,1,2,2,1,2,1,1,2,2,1,1,2,2,2,1,2,2,1,2,2,2,2,2,2,1,1,2,1,2,2,1,2,1,1,2,1,1,1,2,2,2,1,2,2,1,1,2,2,2,1,2,1,1,2,1,1,1,1,1,2,1,1,1,1,1,2,1,1,2,1,1,1,2,2,1,1,1,1,1,1,2,2,1,2,1,1,1,2,2,2,2,2,2,1,1,2,1,1,2,1,1,2,1,2,1,1,2,1,2,2,1,1,2,1,2,1,2,2,1,2,1,1,1,1,1,2,2,2,1,1,1,2,2,1,2,2,2,2,1,2,2,2,1,2,2,2,2,0,0]
print('Running test1 with len of array', len(test1))
ans = s.canJump(test1)        
print(ans, (time.time_ns() - start) / 1000000.0)

